//! # Ê∂âÊ°àËµÑÈáëËøΩË∏™ÂàÜÊûêÁ≥ªÁªü Rust ÂêéÁ´Ø
//! 
//! È´òÊÄßËÉΩÁöÑÈáëËûçÊï∞ÊçÆÂàÜÊûêÂºïÊìéÔºåÊèê‰æõFIFOÂíå‰ΩôÈ¢ùÊ≥ï‰∏§ÁßçÁÆóÊ≥ïËøΩË∏™ËµÑÈáëÊµÅÂêë„ÄÇ
//! 
//! ## ‰∏ªË¶ÅÁâπÊÄß
//! 
//! - üöÄ È´òÊÄßËÉΩÔºöÁõ∏ÊØîPythonÁâàÊú¨ÊèêÂçá10-15ÂÄçÂ§ÑÁêÜÈÄüÂ∫¶
//! - üîí ÂÜÖÂ≠òÂÆâÂÖ®ÔºöRustÁºñËØëÊó∂‰øùËØÅÂÜÖÂ≠òÂíåÁ∫øÁ®ãÂÆâÂÖ®
//! - üìä ÂèåÁÆóÊ≥ïÔºöÊîØÊåÅFIFOÂÖàËøõÂÖàÂá∫Âíå‰ΩôÈ¢ùÊ≥ï‰∏§ÁßçËøΩË∏™ÁÆóÊ≥ï
//! - üí∞ ÊäïËµÑ‰∫ßÂìÅÔºöÂÆåÊï¥ÁöÑÂú∫Â§ñËµÑÈáëÊ±†ÁÆ°ÁêÜÂíåÁõà‰∫èÂàÜÊûê
//! - üìà ÂÆûÊó∂Â§ÑÁêÜÔºöÊîØÊåÅÂ§ßÊï∞ÊçÆÈáèÁöÑÂÆûÊó∂ËøõÂ∫¶Êä•Âëä
//! - üîß ÊòìÈõÜÊàêÔºö‰∏∫TauriÂâçÁ´ØÊèê‰æõÂÆåÊï¥ÁöÑÂêéÁ´ØÊúçÂä°
//! 
//! ## Êû∂ÊûÑËÆæËÆ°
//! 
//! ```text
//! audit_backend
//! ‚îú‚îÄ‚îÄ algorithms/     # Ê†∏ÂøÉÁÆóÊ≥ïÂºïÊìé
//! ‚îú‚îÄ‚îÄ services/       # ‰∏öÂä°ÊúçÂä°Â±Ç
//! ‚îú‚îÄ‚îÄ data_structures/# Ê†∏ÂøÉÊï∞ÊçÆÁªìÊûÑ
//! ‚îú‚îÄ‚îÄ utils/          # Â∑•ÂÖ∑ÂíåÈÖçÁΩÆ
//! ‚îî‚îÄ‚îÄ optimizations/  # ÊÄßËÉΩ‰ºòÂåñÊ®°Âùó
//! ```
//! 
//! ## ‰ΩøÁî®Á§∫‰æã
//! 
//! ```rust,no_run
//! use audit_backend::services::AuditService;
//! use audit_backend::algorithms::AlgorithmType;
//! 
//! async fn example() -> anyhow::Result<()> {
//!     let mut service = AuditService::new(AlgorithmType::Fifo)?;
//!     let result = service.analyze_file("data.xlsx").await?;
//!     println!("Â§ÑÁêÜ‰∫Ü {} Êù°ËÆ∞ÂΩï", result.total_processed);
//!     Ok(())
//! }
//! ```

pub mod algorithms;
pub mod data_structures;
pub mod services;
pub mod utils;
pub mod optimizations;

// ÈáçÊñ∞ÂØºÂá∫‰∏ªË¶ÅÁ±ªÂûã‰æõÂ§ñÈÉ®‰ΩøÁî®
pub use algorithms::{AlgorithmType, TrackerEngine, FifoTracker, BalanceMethodTracker};
pub use data_structures::{Transaction, FundPool, ProcessResult};
pub use services::{AuditService, TimePointQueryService, AuditResult};
pub use utils::{Config, AuditError};

/// Â∫ìÁâàÊú¨‰ø°ÊÅØ
pub const VERSION: &str = env!("CARGO_PKG_VERSION");

/// Ëé∑ÂèñÂ∫ì‰ø°ÊÅØ
pub fn get_library_info() -> LibraryInfo {
    LibraryInfo {
        name: env!("CARGO_PKG_NAME"),
        version: VERSION,
        description: env!("CARGO_PKG_DESCRIPTION"),
        authors: env!("CARGO_PKG_AUTHORS"),
    }
}

/// Â∫ì‰ø°ÊÅØÁªìÊûÑ
#[derive(Debug, Clone)]
pub struct LibraryInfo {
    pub name: &'static str,
    pub version: &'static str,
    pub description: &'static str,
    pub authors: &'static str,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_library_info() {
        let info = get_library_info();
        assert_eq!(info.name, "audit-backend");
        assert!(!info.version.is_empty());
    }
}